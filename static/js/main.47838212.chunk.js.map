{"version":3,"sources":["components/ArtistList/ArtistListTitle.js","components/ArtistList/ArtistSearchBox.js","components/ArtistList/Artist.js","components/ArtistList/ArtistList.js","components/AlbumList/AlbumTitle.js","components/AlbumList/Song.js","components/AlbumList/SongList.js","components/AlbumList/Album.js","components/AlbumList/AlbumListTitle.js","components/AlbumList/AlbumList.js","services/MusicBrainzApi/MusicBrainzApi.js","App.js","serviceWorker.js","index.js"],"names":["ArtistListTitle","props","label","isLoading","className","debaunce","timer","callback","ms","clearTimeout","setTimeout","ArtisSearchBox","searchValue","cbChangeSearchValue","cbChange","htmlFor","id","type","size","value","onChange","event","target","onKeyUp","Artist","artist","to","state","artistName","name","disambiguation","ArtistList","MusicBrainzApi","useState","artistList","setArtistList","setIsLoading","handleSearch","musicBrainzApi","encoded","encodeURI","path","query","then","response","json","data","artists","useEffect","ArtistSearchBox","map","key","AlbumTitle","year","Song","song","number","title","SongList","songList","Album","album","tracks","AlbumListTitle","parseDate","date","parts","split","length","AlbumList","location","albumList","setAlbumList","processed","releases","recordings","releasesProcessed","sort","a","b","release","status","includes","push","media","forEach","track","duration","parseInt","position","processReleases","Fragment","request","Request","method","headers","fetch","App","setSearchValue","href","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47838212.chunk.js","sourcesContent":["import './ArtistListTitle.css';\nimport React from 'react';\n\nfunction ArtistListTitle(props) {\n  const { label, isLoading } = props;\n  return (\n    <div className=\"artist-list-title\">\n      <h2>\n        {label}\n        {isLoading === true && <span className=\"loading\"> Loading...</span>}\n      </h2>\n    </div>\n  );\n}\n\nexport default ArtistListTitle;\n","import React from 'react';\n\nfunction ArtisSearchBox(props) {\n  const { searchValue, cbChangeSearchValue, cbChange } = props;\n\n  const handleChange = event => {\n    cbChangeSearchValue(event.target.value);\n  };\n\n  const handleKeyUp = () => {\n    debaunce(function () {\n      cbChange(searchValue);\n    }, 400);\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"artist-search-box\">Type an artist name </label>\n      <input\n        id=\"artist-search-box\"\n        type=\"text\"\n        className=\"artist-search-box\"\n        size={35}\n        value={searchValue}\n        onChange={handleChange}\n        onKeyUp={handleKeyUp}\n      />\n    </div>\n  );\n}\n\nconst debaunce = (function () {\n  var timer = 0;\n  return function (callback, ms) {\n    clearTimeout(timer);\n    timer = setTimeout(callback, ms);\n  };\n})();\n\nexport default ArtisSearchBox;\n","import './Artist.css';\nimport React from 'react';\nimport { Link } from '@reach/router';\n\nfunction Artist(props) {\n  const { artist } = props;\n\n  return (\n    <li className=\"artist\">\n      <Link\n        to={'/discography/artist/' + artist.id}\n        state={{\n          artistName: artist.name,\n        }}\n      >\n        <span className=\"artis-name\">{artist.name}</span>\n      </Link>\n      {artist.disambiguation && (\n        <span className=\"artist-disambiguation\">\n          {' '}\n          ({artist.disambiguation})\n        </span>\n      )}\n    </li>\n  );\n}\n\nexport default Artist;\n","import './ArtistList.css';\nimport React, { useEffect, useState } from 'react';\nimport ArtistListTitle from './ArtistListTitle';\nimport ArtistSearchBox from './ArtistSearchBox';\nimport Artist from './Artist';\n\nfunction ArtistList(props) {\n  const { MusicBrainzApi, searchValue, cbChangeSearchValue } = props;\n\n  const [artistList, setArtistList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSearch = searchValue => {\n    setIsLoading(true);\n    const musicBrainzApi = new MusicBrainzApi();\n    const encoded = encodeURI(searchValue);\n    const path = `artist/?query=artist:%22${encoded}%22`;\n    musicBrainzApi\n      .query(path)\n      .then(response => response.json())\n      .then(data => {\n        setArtistList(data.artists || []);\n        setIsLoading(false);\n      });\n  };\n\n  // This triggers searching after pressing back button in the album list\n  useEffect(() => {\n    if (searchValue) {\n      handleSearch(searchValue);\n    }\n    // We only want this to run on component load\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"artist-list\">\n      <ArtistListTitle label=\"Artists\" isLoading={isLoading} />\n      <ArtistSearchBox\n        searchValue={searchValue}\n        cbChangeSearchValue={cbChangeSearchValue}\n        cbChange={handleSearch}\n      />\n      <ul>\n        {artistList.map(artist => (\n          <Artist key={artist.id} artist={artist} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ArtistList;\n","import './AlbumTitle.css';\nimport React from 'react';\n\nfunction AlbumTitle(props) {\n  const { year, label } = props;\n  return (\n    <div className=\"album-title\">\n      <span className=\"album-title-label\">{label}</span>\n      <span className=\"album-title-year\"> ({year})</span>\n    </div>\n  );\n}\n\nexport default AlbumTitle;\n","import React from 'react';\n\nfunction Song(props) {\n  const { song } = props;\n\n  return (\n    <div className=\"song\">\n      <span className=\"\">{song.number}</span>\n      <span> {song.title}</span>\n    </div>\n  );\n}\n\nexport default Song;\n","import React from 'react';\nimport Song from './Song';\n\nfunction SongList(props) {\n  const { songList } = props;\n\n  return (\n    <div className=\"song-list\">\n      {songList.map(song => (\n        <Song key={song.id} song={song}></Song>\n      ))}\n    </div>\n  );\n}\n\nexport default SongList;\n","import React from 'react';\nimport AlbumTitle from './AlbumTitle';\nimport SongList from './SongList';\n\nfunction Album(props) {\n  const { album } = props;\n\n  return (\n    <div className=\"album\">\n      <AlbumTitle label={album.title} year={album.year}></AlbumTitle>\n      <SongList songList={album.tracks}></SongList>\n    </div>\n  );\n}\n\nexport default Album;\n","import './AlbumListTitle.css';\nimport React from 'react';\nimport { Link } from '@reach/router';\n\nfunction AlbumListTitle(props) {\n  const { label } = props;\n  return (\n    <div className=\"album-list-title\">\n      <h2>\n        {label}{' '}\n        <span className=\"back-button\">\n          <Link to=\"/discography/\">Back</Link>\n        </span>\n      </h2>\n    </div>\n  );\n}\n\nexport default AlbumListTitle;\n","import './AlbumList.css';\nimport React, { useEffect, useState } from 'react';\nimport Album from './Album';\nimport AlbumListTitle from './AlbumListTitle';\n\nfunction AlbumList(props) {\n  const { id, MusicBrainzApi } = props;\n  const { artistName } = props.location.state;\n\n  const [albumList, setAlbumList] = useState([]);\n\n  useEffect(() => {\n    const musicBrainzApi = new MusicBrainzApi();\n    const encoded = encodeURI(id);\n    const path = `release?artist=${encoded}&inc=recordings`;\n    musicBrainzApi\n      .query(path)\n      .then(response => response.json())\n      .then(data => {\n        const processed = processReleases(data.releases);\n        setAlbumList(processed || []);\n      });\n  }, [id, MusicBrainzApi]);\n\n  return (\n    <React.Fragment>\n      <AlbumListTitle label={artistName} />\n      <div className=\"album-list\">\n        {albumList.map(album => (\n          <Album key={album.id} album={album}></Album>\n        ))}\n      </div>\n    </React.Fragment>\n  );\n}\n\nfunction processReleases(releases) {\n  const recordings = [];\n  const releasesProcessed = [];\n\n  // Sort releases ascending\n  releases.sort((a, b) => {\n    if (!b.date) {\n      return -1;\n    }\n    if (!a.date) {\n      return 1;\n    }\n    return a.date <= b.date ? -1 : 1;\n  });\n\n  for (let release of releases) {\n    if (release.status !== 'Official') {\n      continue;\n    }\n    // releases can be repeated (several editions of the same record) keep just the first one\n    if (releasesProcessed.includes(release.title) === true) {\n      continue;\n    }\n\n    // Mark the release as processed\n    releasesProcessed.push(release.title);\n    release.media.forEach(media => {\n      const album = {\n        id: release.id,\n        title: release.title,\n        year: parseDate(release.date),\n        tracks: [],\n      };\n      media.tracks.forEach(track => {\n        album.tracks.push({\n          id: track.id,\n          title: track.title,\n          duration: parseInt(track.length / 1000),\n          number: track.position,\n        });\n      });\n      recordings.push(album);\n    });\n  }\n\n  return recordings;\n}\n\nfunction parseDate(date) {\n  if (!date) {\n    return '';\n  }\n  const parts = date.split('-');\n  if (parts.length > 0) {\n    return parts[0];\n  } else {\n    return '';\n  }\n}\n\nexport default AlbumList;\n","class MusicBrainzApi {\n  query(path) {\n    const request = new Request(\n      `https://musicbrainz.org/ws/2/${path}&limit=100&fmt=json`,\n      {\n        method: 'GET',\n        headers: {\n          'User-Agent': 'Discography/0.0.0 (davidquintu@gmail.com)',\n        },\n      }\n    );\n    return fetch(request);\n  }\n}\n\nexport default MusicBrainzApi;\n","import React, { useState } from 'react';\nimport './App.css';\nimport ArtistList from './components/ArtistList/ArtistList';\nimport AlbumList from './components/AlbumList/AlbumList';\nimport MusicBrainzApi from './services/MusicBrainzApi/MusicBrainzApi';\nimport { Router } from '@reach/router';\n\nfunction App() {\n  const [searchValue, setSearchValue] = useState('');\n  return (\n    <div className=\"app\">\n      <h1>Discography</h1>\n      <p>Search for an artist and display its discography.</p>\n      <p>\n        This app is powered by the{' '}\n        <a href=\"https://musicbrainz.org/\">MusicBrainz</a> API,{' '}\n        <a href=\"https://reactjs.org\">React</a> and many other open source\n        projects.\n      </p>\n\n      <Router>\n        <ArtistList\n          path=\"/discography/\"\n          MusicBrainzApi={MusicBrainzApi}\n          searchValue={searchValue}\n          cbChangeSearchValue={setSearchValue}\n        />\n\n        <AlbumList\n          path=\"/discography/artist/:id\"\n          MusicBrainzApi={MusicBrainzApi}\n        ></AlbumList>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}